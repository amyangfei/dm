// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tracer_syncer.proto

package pb

import (
	fmt "fmt"
	io "io"
	math "math"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BaseEvent struct {
	Filename string    `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Line     int32     `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	Tso      int64     `protobuf:"varint,3,opt,name=tso,proto3" json:"tso,omitempty"`
	TraceID  string    `protobuf:"bytes,4,opt,name=traceID,proto3" json:"traceID,omitempty"`
	Type     TraceType `protobuf:"varint,5,opt,name=type,proto3,enum=pb.TraceType" json:"type,omitempty"`
}

func (m *BaseEvent) Reset()         { *m = BaseEvent{} }
func (m *BaseEvent) String() string { return proto.CompactTextString(m) }
func (*BaseEvent) ProtoMessage()    {}
func (*BaseEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa4988ddb6d489fb, []int{0}
}
func (m *BaseEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseEvent.Merge(m, src)
}
func (m *BaseEvent) XXX_Size() int {
	return m.Size()
}
func (m *BaseEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BaseEvent proto.InternalMessageInfo

func (m *BaseEvent) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *BaseEvent) GetLine() int32 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *BaseEvent) GetTso() int64 {
	if m != nil {
		return m.Tso
	}
	return 0
}

func (m *BaseEvent) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *BaseEvent) GetType() TraceType {
	if m != nil {
		return m.Type
	}
	return TraceType_DummyEvent
}

type MySQLPosition struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pos  uint32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *MySQLPosition) Reset()         { *m = MySQLPosition{} }
func (m *MySQLPosition) String() string { return proto.CompactTextString(m) }
func (*MySQLPosition) ProtoMessage()    {}
func (*MySQLPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa4988ddb6d489fb, []int{1}
}
func (m *MySQLPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MySQLPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MySQLPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MySQLPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLPosition.Merge(m, src)
}
func (m *MySQLPosition) XXX_Size() int {
	return m.Size()
}
func (m *MySQLPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLPosition.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLPosition proto.InternalMessageInfo

func (m *MySQLPosition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MySQLPosition) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

type SyncerState struct {
	SafeMode  bool           `protobuf:"varint,1,opt,name=safeMode,proto3" json:"safeMode,omitempty"`
	TryReSync bool           `protobuf:"varint,2,opt,name=tryReSync,proto3" json:"tryReSync,omitempty"`
	LastPos   *MySQLPosition `protobuf:"bytes,3,opt,name=lastPos,proto3" json:"lastPos,omitempty"`
}

func (m *SyncerState) Reset()         { *m = SyncerState{} }
func (m *SyncerState) String() string { return proto.CompactTextString(m) }
func (*SyncerState) ProtoMessage()    {}
func (*SyncerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa4988ddb6d489fb, []int{2}
}
func (m *SyncerState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncerState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncerState.Merge(m, src)
}
func (m *SyncerState) XXX_Size() int {
	return m.Size()
}
func (m *SyncerState) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncerState.DiscardUnknown(m)
}

var xxx_messageInfo_SyncerState proto.InternalMessageInfo

func (m *SyncerState) GetSafeMode() bool {
	if m != nil {
		return m.SafeMode
	}
	return false
}

func (m *SyncerState) GetTryReSync() bool {
	if m != nil {
		return m.TryReSync
	}
	return false
}

func (m *SyncerState) GetLastPos() *MySQLPosition {
	if m != nil {
		return m.LastPos
	}
	return nil
}

type SyncerBinlogEvent struct {
	Base       *BaseEvent     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	State      *SyncerState   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	EventType  int32          `protobuf:"varint,3,opt,name=eventType,proto3" json:"eventType,omitempty"`
	OpType     int32          `protobuf:"varint,4,opt,name=opType,proto3" json:"opType,omitempty"`
	CurrentPos *MySQLPosition `protobuf:"bytes,5,opt,name=currentPos,proto3" json:"currentPos,omitempty"`
}

func (m *SyncerBinlogEvent) Reset()         { *m = SyncerBinlogEvent{} }
func (m *SyncerBinlogEvent) String() string { return proto.CompactTextString(m) }
func (*SyncerBinlogEvent) ProtoMessage()    {}
func (*SyncerBinlogEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa4988ddb6d489fb, []int{3}
}
func (m *SyncerBinlogEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncerBinlogEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncerBinlogEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncerBinlogEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncerBinlogEvent.Merge(m, src)
}
func (m *SyncerBinlogEvent) XXX_Size() int {
	return m.Size()
}
func (m *SyncerBinlogEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncerBinlogEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SyncerBinlogEvent proto.InternalMessageInfo

func (m *SyncerBinlogEvent) GetBase() *BaseEvent {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *SyncerBinlogEvent) GetState() *SyncerState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *SyncerBinlogEvent) GetEventType() int32 {
	if m != nil {
		return m.EventType
	}
	return 0
}

func (m *SyncerBinlogEvent) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func (m *SyncerBinlogEvent) GetCurrentPos() *MySQLPosition {
	if m != nil {
		return m.CurrentPos
	}
	return nil
}

func init() {
	proto.RegisterType((*BaseEvent)(nil), "pb.BaseEvent")
	proto.RegisterType((*MySQLPosition)(nil), "pb.MySQLPosition")
	proto.RegisterType((*SyncerState)(nil), "pb.SyncerState")
	proto.RegisterType((*SyncerBinlogEvent)(nil), "pb.SyncerBinlogEvent")
}

func init() { proto.RegisterFile("tracer_syncer.proto", fileDescriptor_aa4988ddb6d489fb) }

var fileDescriptor_aa4988ddb6d489fb = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4d, 0x4b, 0xeb, 0x40,
	0x14, 0xed, 0xb4, 0x49, 0x3f, 0x6e, 0xe8, 0x7b, 0xaf, 0xf3, 0xe0, 0x11, 0xca, 0x23, 0xa4, 0x01,
	0x21, 0x20, 0x14, 0xac, 0xf8, 0x07, 0x8a, 0x2e, 0x04, 0x0b, 0x75, 0xda, 0xbd, 0x24, 0x75, 0x2a,
	0x81, 0x98, 0x09, 0x99, 0x51, 0xc8, 0x5f, 0x70, 0xe5, 0xaf, 0x12, 0x97, 0x5d, 0xba, 0x94, 0xf6,
	0x8f, 0xc8, 0xbd, 0xe9, 0x97, 0x0b, 0x77, 0xf7, 0xde, 0x73, 0xe6, 0x9e, 0x73, 0x2e, 0x03, 0x7f,
	0x4d, 0x11, 0x2d, 0x64, 0x71, 0xa7, 0xcb, 0x6c, 0x21, 0x8b, 0x61, 0x5e, 0x28, 0xa3, 0x78, 0x3d,
	0x8f, 0xfb, 0xbd, 0x2d, 0x60, 0xca, 0x5c, 0x56, 0xe3, 0xe0, 0x85, 0x41, 0x67, 0x1c, 0x69, 0x79,
	0xf5, 0x2c, 0x33, 0xc3, 0xfb, 0xd0, 0x5e, 0x26, 0xa9, 0xcc, 0xa2, 0x47, 0xe9, 0x32, 0x9f, 0x85,
	0x1d, 0xb1, 0xef, 0x39, 0x07, 0x2b, 0x4d, 0x32, 0xe9, 0xd6, 0x7d, 0x16, 0xda, 0x82, 0x6a, 0xfe,
	0x07, 0x1a, 0x46, 0x2b, 0xb7, 0xe1, 0xb3, 0xb0, 0x21, 0xb0, 0xe4, 0x2e, 0xb4, 0x48, 0xe4, 0xfa,
	0xd2, 0xb5, 0x68, 0xc1, 0xae, 0xe5, 0x03, 0xb0, 0x50, 0xd7, 0xb5, 0x7d, 0x16, 0xfe, 0x1a, 0x75,
	0x87, 0x79, 0x3c, 0x9c, 0x23, 0x34, 0x2f, 0x73, 0x29, 0x08, 0x0a, 0x2e, 0xa0, 0x3b, 0x29, 0x67,
	0xb7, 0x37, 0x53, 0xa5, 0x13, 0x93, 0xa8, 0x0c, 0x35, 0x8f, 0xbc, 0x50, 0x8d, 0x9a, 0xb9, 0xd2,
	0x64, 0xa3, 0x2b, 0xb0, 0x0c, 0x0c, 0x38, 0x33, 0x8a, 0x3a, 0x33, 0x91, 0x91, 0x18, 0x42, 0x47,
	0x4b, 0x39, 0x51, 0xf7, 0xd5, 0xc3, 0xb6, 0xd8, 0xf7, 0xfc, 0x3f, 0x74, 0x4c, 0x51, 0x0a, 0x89,
	0x7c, 0x5a, 0xd1, 0x16, 0x87, 0x01, 0x3f, 0x85, 0x56, 0x1a, 0x69, 0x33, 0x55, 0x9a, 0x22, 0x39,
	0xa3, 0x1e, 0xba, 0xfc, 0x66, 0x49, 0xec, 0x18, 0xc1, 0x1b, 0x83, 0x5e, 0x25, 0x3b, 0x4e, 0xb2,
	0x54, 0x3d, 0x54, 0x17, 0x1c, 0x80, 0x15, 0x47, 0xba, 0x12, 0x76, 0xaa, 0x94, 0xfb, 0xf3, 0x0a,
	0x82, 0xf8, 0x09, 0xd8, 0x1a, 0x8d, 0x92, 0xbe, 0x33, 0xfa, 0x8d, 0x9c, 0x23, 0xff, 0xa2, 0x42,
	0xd1, 0xaa, 0xc4, 0x57, 0x78, 0x1f, 0xb2, 0x63, 0x8b, 0xc3, 0x80, 0xff, 0x83, 0xa6, 0xca, 0x09,
	0xb2, 0x08, 0xda, 0x76, 0xfc, 0x0c, 0x60, 0xf1, 0x54, 0x14, 0x32, 0xa3, 0x14, 0xf6, 0x4f, 0x29,
	0x8e, 0x48, 0x63, 0xf7, 0x7d, 0xed, 0xb1, 0xd5, 0xda, 0x63, 0x9f, 0x6b, 0x8f, 0xbd, 0x6e, 0xbc,
	0xda, 0x6a, 0xe3, 0xd5, 0x3e, 0x36, 0x5e, 0x2d, 0x6e, 0xd2, 0x1f, 0x39, 0xff, 0x0a, 0x00, 0x00,
	0xff, 0xff, 0x3e, 0x63, 0x83, 0xd0, 0x51, 0x02, 0x00, 0x00,
}

func (m *BaseEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Filename) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTracerSyncer(dAtA, i, uint64(len(m.Filename)))
		i += copy(dAtA[i:], m.Filename)
	}
	if m.Line != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTracerSyncer(dAtA, i, uint64(m.Line))
	}
	if m.Tso != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTracerSyncer(dAtA, i, uint64(m.Tso))
	}
	if len(m.TraceID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTracerSyncer(dAtA, i, uint64(len(m.TraceID)))
		i += copy(dAtA[i:], m.TraceID)
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTracerSyncer(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *MySQLPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLPosition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTracerSyncer(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTracerSyncer(dAtA, i, uint64(m.Pos))
	}
	return i, nil
}

func (m *SyncerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncerState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SafeMode {
		dAtA[i] = 0x8
		i++
		if m.SafeMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TryReSync {
		dAtA[i] = 0x10
		i++
		if m.TryReSync {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LastPos != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTracerSyncer(dAtA, i, uint64(m.LastPos.Size()))
		n1, err := m.LastPos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SyncerBinlogEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncerBinlogEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTracerSyncer(dAtA, i, uint64(m.Base.Size()))
		n2, err := m.Base.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.State != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTracerSyncer(dAtA, i, uint64(m.State.Size()))
		n3, err := m.State.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.EventType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTracerSyncer(dAtA, i, uint64(m.EventType))
	}
	if m.OpType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTracerSyncer(dAtA, i, uint64(m.OpType))
	}
	if m.CurrentPos != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTracerSyncer(dAtA, i, uint64(m.CurrentPos.Size()))
		n4, err := m.CurrentPos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeVarintTracerSyncer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BaseEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovTracerSyncer(uint64(l))
	}
	if m.Line != 0 {
		n += 1 + sovTracerSyncer(uint64(m.Line))
	}
	if m.Tso != 0 {
		n += 1 + sovTracerSyncer(uint64(m.Tso))
	}
	l = len(m.TraceID)
	if l > 0 {
		n += 1 + l + sovTracerSyncer(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTracerSyncer(uint64(m.Type))
	}
	return n
}

func (m *MySQLPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTracerSyncer(uint64(l))
	}
	if m.Pos != 0 {
		n += 1 + sovTracerSyncer(uint64(m.Pos))
	}
	return n
}

func (m *SyncerState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SafeMode {
		n += 2
	}
	if m.TryReSync {
		n += 2
	}
	if m.LastPos != nil {
		l = m.LastPos.Size()
		n += 1 + l + sovTracerSyncer(uint64(l))
	}
	return n
}

func (m *SyncerBinlogEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovTracerSyncer(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovTracerSyncer(uint64(l))
	}
	if m.EventType != 0 {
		n += 1 + sovTracerSyncer(uint64(m.EventType))
	}
	if m.OpType != 0 {
		n += 1 + sovTracerSyncer(uint64(m.OpType))
	}
	if m.CurrentPos != nil {
		l = m.CurrentPos.Size()
		n += 1 + l + sovTracerSyncer(uint64(l))
	}
	return n
}

func sovTracerSyncer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTracerSyncer(x uint64) (n int) {
	return sovTracerSyncer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracerSyncer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracerSyncer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			m.Line = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Line |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tso", wireType)
			}
			m.Tso = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tso |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracerSyncer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (TraceType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTracerSyncer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTracerSyncer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracerSyncer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracerSyncer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTracerSyncer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTracerSyncer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncerState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracerSyncer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafeMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SafeMode = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TryReSync", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TryReSync = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracerSyncer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastPos == nil {
				m.LastPos = &MySQLPosition{}
			}
			if err := m.LastPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracerSyncer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTracerSyncer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncerBinlogEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracerSyncer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncerBinlogEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncerBinlogEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracerSyncer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseEvent{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracerSyncer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &SyncerState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracerSyncer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentPos == nil {
				m.CurrentPos = &MySQLPosition{}
			}
			if err := m.CurrentPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracerSyncer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTracerSyncer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTracerSyncer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTracerSyncer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracerSyncer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTracerSyncer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTracerSyncer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTracerSyncer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTracerSyncer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTracerSyncer   = fmt.Errorf("proto: integer overflow")
)
